// Run with:
// webppl test/wppl/game/featurize_L.wppl --require ../gameppl --require . --splitName game_34_33_33 --gamesDir examples/games/json --featureVocabDir examples/features/vocab --featureMatrixDir examples/features/mat

var args = util_parseArgs();
var gamesDir = args["gamesDir"];
var featureVocabDir = args["featureVocabDir"];
var featureMatrixDir = args["featureMatrixDir"];
var splitName = args["splitName"];

var partition = gameppl.partition.load("examples/games/splits/" + splitName);

var utteranceFn = gameppl.rgame.getPairedUtterancesFn(gameppl.rgame.senders.SPEAKER);
var actionFn = gameppl.rgame.getPairedActionsFn(gameppl.rgame.senders.SPEAKER)

var obsFeatureTypes = [
    {
        name : "lH_0", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lH_0", partName : "train" }
    },
    {
        name : "lH_1", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lH_1", partName : "train" }
    },
    {
        name : "lH_2", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lH_2", partName : "train" }
    },

    {
        name : "lS_0", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lS_0", partName : "train" }
    },
    {
        name : "lS_1", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lS_1", partName : "train" }
    },
    {
        name : "lS_2", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lS_2", partName : "train" }
    },
    {
        name : "lL_0", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lL_0", partName : "train" }
    },
    {
        name : "lL_1", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lL_1", partName : "train" }
    },
    {
        name : "lL_2", type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lL_2", partName : "train" }
    }
];

var obsVector = ["lH_0","lH_1","lH_2","lS_0","lS_1","lS_2","lL_0","lL_1","lL_2"];
var obsf = gameppl.feature.initFeatureSet("L_obs", gamesDir, utteranceFn, actionFn, obsFeatureTypes, obsVector, partition);
var obsF = gameppl.feature.computeFeatureSet(obsf, gamesDir, colorppl.util.getColorGameUtteranceActionPairs);

var outputFeatureTypes = [
    {
        name : "lClickedIndex",
        type : gameppl.feature.types.ACTION_DIMENSION_SCALAR,
        parameters : { prefix : "lClickedIndex" }
    }
];

var outputVector = ["lClickedIndex"];
var outputf = gameppl.feature.initFeatureSet("L_out", gamesDir, utteranceFn, actionFn, outputFeatureTypes, outputVector, partition);
var outputF = gameppl.feature.computeFeatureSet(outputf, gamesDir, colorppl.util.getColorGameUtteranceActionPairs);

var uttFeatureTypes = [
    {
        name : "utok", type : gameppl.feature.types.UTTERANCE_TOKEN_ANNOTATION_ENUMERABLE,
        parameters : {
            partName : "train",
            annotation : gameppl.rgame.annotations.LEMMA,
            minCount : 2,
            toLowerCase : true,
            type : gameppl.feature.enumerableTypes.INDEX
        }
    }
];

var uttVector = ["utok"];
var uttf = gameppl.feature.initFeatureSet("L_utt", gamesDir, utteranceFn, actionFn, uttFeatureTypes, uttVector, partition);
var uttF = gameppl.feature.computeFeatureSet(uttf, gamesDir, colorppl.util.getColorGameUtteranceActionPairs);

gameppl.feature.saveFeatureSet(obsf, featureVocabDir + "/L_obs");
gameppl.feature.saveFeatureSet(outputf, featureVocabDir + "/L_out");
gameppl.feature.saveFeatureSet(uttf, featureVocabDir + "/L_utt");

gameppl.feature.saveFeatureMatrix(obsF, featureMatrixDir + "/L_obs");
gameppl.feature.saveFeatureMatrix(outputF, featureMatrixDir + "/L_out");
gameppl.feature.saveFeatureMatrix(uttF, featureMatrixDir + "/L_utt");
