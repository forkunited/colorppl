// Run with:
// webppl test/wppl/train_model_seqS0.wppl --require webppl-nn --require . --random-seed 1 --iterations 100 --latentDim 25 --inputF Ld_in --outputF Ld_out --splitName default --splitType GAME_ROUND

var args = util_parseArgs();
var name = args["name"];
var rootDir = args["rootDir"];
var inputFName = args["inputF"];
var outputFName = args["outputF"];
var iterations = args["iterations"]*1;
var latentDim = args["latentDim"]*1;
var splitName = args["splitName"];
var splitType = args["splitType"];
var evalSamples = args["evalSamples"]*1;
var qualSamples = args["qualSamples"]*1;
var maxUtteranceLength = 5;
var approximationBeamSize = 5;
var batchSize = 100;
var gradientSamples = 1;

var inputf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + inputFName);
var outputf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + outputFName);

var inputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + inputFName);
var outputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + outputFName);

var D = data_makeFromFeatureMatrices(inputF, outputF, { inputType : DATA_TYPE_VECTOR, outputType : DATA_TYPE_SCALAR_SEQUENCE, maxOutputSequenceLength : maxUtteranceLength });
var partition = gameppl.partition.load(rootDir + "/examples/games/splits/" + splitName);
var splitFn = (splitType === "GAME") ? gameppl.data.getDatumGame : (splitType === "ROUND") ? gameppl.data.getDatumRound : gameppl.data.getDatumGameRound

var D_split = gameppl.partition.split(partition, D, splitFn);
var D_train = D_split['train'];
var D_dev = D_split['dev'];

var encoderType = ENC_NN;
var encoderParamFn = function() {
    return {
        name : "enc_S0",
        inputDimension : gameppl.feature.getFeatureMatrixVocabularySize(inputF),
        encoderType : NN_ENCODER_TANH,
        latentDimension : latentDim
    };
};

var decoderType = ENC_SEQ;
var decoderParamFn = function() {
    return {
        name : "dec_S0",
        latentDimension : latentDim,
        outputDimension : gameppl.feature.getFeatureMatrixVocabularySize(outputF),
        initStepFn : nn_initSequenceDecoderStep,
        startSymbol : gameppl.feature.symbols.START_SYMBOL,
        terminalSymbol : gameppl.feature.symbols.TERMINAL_SYMBOL,
        maxLength : maxUtteranceLength,
        samplingType : SEQ_DECODER_EXACT,
        approximationBeamSize : approximationBeamSize
    };
};

var trainingParams = {
    iterations : iterations,
    gradientSamples : gradientSamples,
    batchSize : batchSize,
    encoderType : encoderType,
    decoderType : decoderType,
    encoderParamFn : encoderParamFn,
    decoderParamFn : decoderParamFn,
    distributionFn : util_objCategorical
};

var s0model = enc_initTrainedModel(trainingParams, D_train);

color_data_displayExamplesS(D_dev, inputf, outputf, qualSamples, s0model, util_objSoftmaxCategorical);

var trainEval = evaluation_modelEncEvalFlattened(evaluation_modelEncLL(s0model, gameppl.util._first(D_train, evalSamples), util_objSoftmaxCategorical, true), "train");
var devEval = evaluation_modelEncEvalFlattened(evaluation_modelEncLL(s0model, gameppl.util._first(D_dev, evalSamples), util_objSoftmaxCategorical, true), "dev");

display("name\tF\tseed\titerations\t" + trainEval[0].join("\t") + "\t" + devEval[0].join("\t"));
display(name + "\t" + inputFName + "\t" + args["random-seed"] + "\t" + iterations + "\t" + trainEval[1].join("\t") + "\t" + devEval[1].join("\t"));
