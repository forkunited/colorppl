// Run with:
// webppl test/wppl/game/train_model_seqL0.wppl --require ../lib/webppl-nn --require ../gameppl --require . --random-seed 1 --rootDir . --uttF L_utt --obsF L_obs --outputF L_out --iterations 100 --latentDim 50 --splitName game_34_33_33 --splitType GAME_ROUND

var args = util_parseArgs();
var rootDir = args["rootDir"];
var uttFName = args["uttF"];
var obsFName = args["obsF"]
var outputFName = args["outputF"];
var iterations = args["iterations"]*1;
var latentDim = args["latentDim"]*1;
var splitName = args["splitName"];
var splitType = args["splitType"];
var rsaAlpha = 1.0;
var maxUtteranceLength = 5;
var batchSize = 100;
var gradientSamples = 1;

display("Loading feature matrices...");

var uttf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + uttFName);
var obsf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + obsFName);
var outputf = gameppl.feature.loadFeatureSet(rootDir + "/examples/features/vocab/" + outputFName);

var uttF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + uttFName);
var obsF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + obsFName);
var outputF = gameppl.feature.loadFeatureMatrix(rootDir + "/examples/features/mat/" + outputFName);

display("Constructing data set...");

var D = data_makeUttObsFromFeatureMatrices(uttF, obsF, outputF, { uttType : DATA_TYPE_SCALAR_SEQUENCE, obsType : DATA_TYPE_VECTOR, outputType : DATA_TYPE_SCALAR });
var partition = gameppl.partition.load(rootDir + "/examples/games/splits/" + splitName);
var splitFn = (splitType === "GAME") ? gameppl.data.getDatumGame : (splitType === "ROUND") ? gameppl.data.getDatumRound : gameppl.data.getDatumGameRound

var D_split = gameppl.partition.split(partition, D, splitFn);
var D_train = D_split['train'];
var D_dev = D_split['dev'];

var utteranceDimension = gameppl.feature.getFeatureMatrixVocabularySize(uttF);
var inputDimension = 3 + utteranceDimension;

display("(Vocabulary size: " + utteranceDimension + ")");

var l0model = l0seq_initTrainedModel({
    utteranceDimension : utteranceDimension,
    inputDimension : inputDimension,
    latentDimension : latentDim,
    iterations : iterations,
    gradientSamples : gradientSamples,
    batchSize : batchSize,
    // Hidden is index... indexes into observation
    seqFn: function(utterance, hidden, observation) {
        var hiddenColor = observation[hidden];
        var uttWorld = map(function(x) {
            concat([oneHot(x, utteranceDimension), hiddenColor])
        }, utterance);
        return uttWorld;
    },
    // Draw a color index
    rsaWorldPrior: function(observed) {
        return uniformDraw([0, 1, 2]);
    },
    // Observed is array containing a vector for each color
    rsaObservedWorldFn: function(input) {
        var obs = input.observation;
        var H0 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lH_0");
        var S0 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lS_0");
        var L0 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lL_0");

        var H1 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lH_1");
        var S1 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lS_1");
        var L1 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lL_1");

        var H2 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lH_2");
        var S2 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lS_2");
        var L2 = gameppl.feature.getTensorFeatureRangeStart(obs, obsf, "lL_2");

        var hsl0 = Vector([H0, S0, L0]);
        var hsl1 = Vector([H1, S1, L1]);
        var hsl2 = Vector([H2, S2, L2]);

        return [hsl0, hsl1, hsl2];
    },
    rsaUtteranceFn: function(input) {
        return input.utterance;
    }
}, D_train);

display("Finished training... outputting example predictions.");

map(function(datum) {
    var obsValues = gameppl.matrix.rowTensorToList(datum.input.observation);
    var obsIndices = mapN(function(x) { x }, obsValues.length);
    var obsFeatures = gameppl.feature.getFeatureSetDimensionsFromIndices(obsf, obsIndices);
    var utterance = gameppl.feature.getFeatureSetDimensionsFromIndices(uttf, datum.input.utterance);
    var output = datum.output;

    display("Observation: " + obsFeatures);
    display("(Observation values: " + obsValues + ")");
    display("Utterance: " + utterance);
    display("True output: " + output);

    display("Output distribution: ")
    var l0Dist = enc_modelDistribution(l0model, datum.input, l0seq_getDistributionFn(l0model));
    map(function(kvPair) {
        //var indices = map(function(idx) { idx*1 } , kvPair[0].split(","))
        display(kvPair[0] + ": " + kvPair[1]);
    }, gameppl.dist.distToArray(l0Dist, 3));
    display("\n");

}, gameppl.util._first(D_dev, 50));

var trainEval = evaluation_modelEncEvalFlattened(evaluation_modelEncModeAccuracy(l0model, D_train, l0seq_getDistributionFn(l0model)), "train");
var devEval = evaluation_modelEncEvalFlattened(evaluation_modelEncModeAccuracy(l0model, D_dev, l0seq_getDistributionFn(l0model)), "dev");

/** Possibly fix this up later if necessary
var s0model = s1seq_getS0Model(s1model);
var meaningFn = s1seq_getMeaningFn(s1model); // utterance x world -> [0, 1]

var devIncEval = gameppl.util.listExpectation(map(function(datum) {
    var scoreFn = function(utterance) { return meaningFn(utterance, datum.input); };
    return enc_modelExpectedIncrement(s0model, s0inputFn(datum.input), util_objCategorical, scoreFn, datum.output);
}, gameppl.util._first(D_dev, 100)));

var trainIncEval = gameppl.util.listExpectation(map(function(datum) {
    var scoreFn = function(utterance) { return meaningFn(utterance, datum.input); };
    return enc_modelExpectedIncrement(s0model, s0inputFn(datum.input), util_objCategorical, scoreFn, datum.output);
}, gameppl.util._first(D_train, 100)));

var devIncHeadings = mapN(function(n) { "dev.inc." + n }, devIncEval.length);
var trainIncHeadings = mapN(function(n) { "train.inc." + n }, trainIncEval.length); */

display("F\tseed\titerations\t" + trainEval[0].join("\t") + "\t" + devEval[0].join("\t") /*+ "\t" + devIncHeadings.join("\t") + "\t" + trainIncHeadings.join("\t")*/);
display(obsFName + "\t" + args["random-seed"] + "\t" + iterations + "\t" + trainEval[1].join("\t") + "\t" + devEval[1].join("\t") /* + "\t" + devIncEval.join("\t") + "\t" + trainIncEval.join("\t") */);
