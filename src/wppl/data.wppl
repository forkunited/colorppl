var color_data_displayExamplesS = function(D, inputf, outputf, nPerCondition, s_model, distFn) {
    var D_far = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "far"));
    var D_close = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "close"));
    var D_split = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "split"));

    var D_small = D_far.concat(D_close).concat(D_split);

    map(function(datum) {
        var inputValues = gameppl.matrix.rowTensorToList(datum.input);
        var inputIndices = mapN(function(x) { x }, inputValues.length);
        var inputFeatures = gameppl.feature.getFeatureSetDimensionsFromIndices(inputf, inputIndices);

        var trueOutputSequence = gameppl.feature.getFeatureSetDimensionsFromIndices(outputf, datum.output);

        display("Condition: " + datum.info.condition);
        display("Input: " + inputFeatures);
        display("(Input values: " + inputValues + ")");
        display("True output: " + trueOutputSequence);

        display("Output distribution: ")
        var s_Dist = enc_modelDistribution(s_model, datum.input, distFn);
        var sReadableDist = map(function(kvPair) {
            if (!kvPair[0].startsWith("[")) {
                var indices = map(function(idx) { idx*1 } , kvPair[0].split(","))
                display(gameppl.feature.getFeatureSetDimensionsFromIndices(outputf, indices) + ": " + kvPair[1]);
            } else {
                display(gameppl.feature.getFeatureSetDimensionsFromIndices(outputf, JSON.parse(kvPair[0])) + ": " + kvPair[1]);
            }
        }, gameppl.dist.distToArray(s_Dist, 3));

        display("\n");
    }, D_small);
};

var color_data_displayExamplesL = function(D, obsf, uttf, nPerCondition, l_model, distFn) {
    var D_far = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "far"));
    var D_close = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "close"));
    var D_split = gameppl.util._first(D, nPerCondition, gameppl.data.makeDatumInfoIndicator("condition", "split"));
    var D_small = D_far.concat(D_close).concat(D_split);

    map(function (datum) {
        var obsValues = gameppl.matrix.rowTensorToList(datum.input.observation);
        var obsIndices = mapN(function (x) { x }, obsValues.length);
        var obsFeatures = gameppl.feature.getFeatureSetDimensionsFromIndices(obsf, obsIndices);
        var utterance = gameppl.feature.getFeatureSetDimensionsFromIndices(uttf, datum.input.utterance);
        var output = datum.output;

        display("Condition: " + datum.info.condition);
        display("Observation: " + obsFeatures);
        display("(Observation values: " + obsValues + ")");
        display("Utterance: " + utterance);
        display("True output: " + output);

        display("Output distribution: ");
        var lDist = enc_modelDistribution(l_model, datum.input, distFn);
        map(function (kvPair) {
            //var indices = map(function(idx) { idx*1 } , kvPair[0].split(","))
            display(kvPair[0] + ": " + kvPair[1]);
        }, gameppl.dist.distToArray(lDist, 3));
        display("\n");
    }, D_small);
};
